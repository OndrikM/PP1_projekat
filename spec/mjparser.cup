

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

    boolean errorDetected;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected=true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;
terminal String IDENT;

terminal BREAK,CLASS,ELSE,CONST,IF,NEW,READ,EXTENDS,CONTINUE,STATIC,NAMESPACE,FOR;
terminal SUB,MUL,DIV,MOD,EQUALEQUAL,NOTEQUAL,GREATER,GREATEREQUAL,LESS,LESSEQUAL,AND,OR,INC,DEC,DOTS,DOT,LSQUARE,RSQUARE,POINTER;
terminal String BOOL;
terminal String CHAR;

terminal HASH;
terminal MAX;

non terminal rs.etf.pp1.symboltable.concepts.Obj Program;
non terminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
non terminal NamespaceList;
non terminal Namespace;
non terminal NamespaceName;
non terminal ConstVarClassDeclList;
non terminal ConstDecl;
non terminal ReptConsts;
non terminal rs.etf.pp1.symboltable.concepts.Obj ConstOption;
non terminal VarDeclList;
non terminal VarDecl;
non terminal ReptVars;
non terminal rs.etf.pp1.symboltable.concepts.Struct SquareOption;
non terminal ClassDecl;
non terminal StaticList;
non terminal StaticInitializers;
non terminal StaticInitializersList;
non terminal StaticInitializer;
non terminal ExtendsOption;
non terminal ClassMethodDeclOption;
non terminal MethodDeclList;
non terminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
non terminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclName;
non terminal rs.etf.pp1.symboltable.concepts.Obj FormPars;
non terminal rs.etf.pp1.symboltable.concepts.Obj ReptPars;
non terminal rs.etf.pp1.symboltable.concepts.Struct Type;
non terminal StatementList;
non terminal Statement;
non terminal PrintOption;
non terminal IfCondition;
non terminal IfStart;
non terminal ElseStart;
non terminal ElseEnd;
non terminal OptElse;
non terminal CondFactOption;
non terminal ForOption1;
non terminal ForOption2;
nonterminal CondEnd;
nonterminal ForStatement;
non terminal DesignatorStatementList;
non terminal DesignatorStatement;
non terminal DesignatorArrayList;
non terminal ActPars;
non terminal MoreActPars;
non terminal rs.etf.pp1.symboltable.concepts.Struct Condition;
non terminal rs.etf.pp1.symboltable.concepts.Struct CondTerm;
non terminal rs.etf.pp1.symboltable.concepts.Struct CondFact;
non terminal rs.etf.pp1.symboltable.concepts.Struct Expr;
non terminal rs.etf.pp1.symboltable.concepts.Struct OptionAddop;
non terminal MinusOption;
non terminal InsertMinus;
non terminal rs.etf.pp1.symboltable.concepts.Struct Term;
non terminal MoreFactors;
non terminal rs.etf.pp1.symboltable.concepts.Struct Factor;
non terminal rs.etf.pp1.symboltable.concepts.Obj Designator;
non terminal rs.etf.pp1.symboltable.concepts.Obj IdentExprOptionList;
non terminal rs.etf.pp1.symboltable.concepts.Obj IdentExprOption;
non terminal FieldArray;
non terminal Label;
non terminal Assignop;
non terminal Relop;
non terminal Addop;
non terminal Mulop;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p NamespaceList ConstVarClassDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NamespaceList ::=(NamespaceListDeclMore) NamespaceList Namespace
                |
                (NamespaceListDeclNoMore)//epsilon
                ;

Namespace ::= (NamespaceDecl) NamespaceName:nn LBRACE ConstVarClassDeclList LBRACE MethodDeclList RBRACE RBRACE;

NamespaceName ::= (NamespaceName) NAMESPACE IDENT:name;

ConstVarClassDeclList::= (ConstVarClassDeclListDeclConst) ConstVarClassDeclList ConstDecl
                         |
                         (ConstVarClassDeclListDeclVar) ConstVarClassDeclList VarDecl
                         |
                         (ConstVarClassDeclListDeclClass) ConstVarClassDeclList ClassDecl
                         |
                         (ConstVarClassDeclListDeclNoMore) //epsilon
                         ;

ConstDecl ::= (ConstDeclNum) CONST Type:typeName IDENT:constName EQUAL NUMBER ReptConsts SEMI
               |
               (ConstDeclChar) CONST Type:typeName IDENT:constName EQUAL CHAR ReptConsts SEMI
               |
               (ConstDeclBool) CONST Type:typeName IDENT:constName EQUAL BOOL ReptConsts SEMI
               ;

ReptConsts ::= (ReptConstsDeclMore) ReptConsts COMMA IDENT:constName EQUAL ConstOption
               |
               (ReptConstsDeclNoMore)//epsilon
               ;

ConstOption ::= (ConstOptionNum) NUMBER
                |
                (ConstOptionChar) CHAR
                |
                (ConstOptionBool) BOOL
                ;

VarDeclList ::= (VarDeclListDeclMore) VarDeclList VarDecl
                |
                (VarDeclListDeclNoMore)//epsilon
                ;

VarDecl ::= (VarDeclNoArray) Type:typeName IDENT:varName ReptVars SEMI
        |
        (VarDeclArray) Type:typeName IDENT:varName LSQUARE RSQUARE ReptVars SEMI
        |
        (VarDeclError) error:e
        {: parser.report_error("Greska u deklaraciji promenljive. Izvrsen oporavak u liniji " + eleft , null);:}
        ;

ReptVars ::= (ReptVarsDeclMore) ReptVars COMMA IDENT:varName SquareOption//definisanje promenljive
            |
            (ReptVarsDeclNoMore)//epsilon
            ;

SquareOption ::= (SquareOptionDeclMore) LSQUARE RSQUARE
                |
                (SquareOptionDeclNoMore)//epsilon
                ;

ClassDecl ::= (ClassDeclDecl) CLASS IDENT ExtendsOption LBRACE StaticList StaticInitializers VarDeclList ClassMethodDeclOption RBRACE;

StaticList ::= (StaticListDeclMore) StaticList STATIC VarDecl
           |
           (StaticListDeclNoMore)//epsilon
           ;

StaticInitializers  ::= (StaticInitiliazer) StaticInitializersList
                    |
                    (NoStaticInitializers)//epsilon
                    ;

StaticInitializersList  ::=(StaticInitializersListNoMore) StaticInitializer
                        |
                        (StaticInitializersListMore) StaticInitializersList StaticInitializer
                        ;

StaticInitializer   ::= (StaticInitializerDecl) STATIC LBRACE StatementList RBRACE;

ExtendsOption ::= (ExtendsOptionDeclMore) EXTENDS Type
                  |
                  (ExtendsOptionDeclError)error:e
                  {: parser.report_error("Greska pri deklaraciji prosirenja natklase. Izvrsen oporavak u liniji " + eleft , null); :}
                  |
                  (ExtendsOptionDeclNoMore)//epsilon
                  ;

ClassMethodDeclOption ::= (ClassMethodDeclOptionDeclMore) ClassMethodDeclOption LBRACE MethodDeclList RBRACE
                      |
                      (ClassMethodDeclOptionDeclNoMore)//epsilon
                      ;

MethodDeclList ::= (MethodDeclListDeclMore) MethodDeclList MethodDecl
                  |
                  (MethodDeclListDeclNoMore)//epsilon
                  ;

MethodDecl ::= (MethodDecl) MethodDeclName:m  VarDeclList LBRACE StatementList RBRACE;

MethodDeclName ::=(MethodDeclNameNoParams) Type:methodReturnType IDENT:methodName LPAREN RPAREN
                 |
                 (MethodDeclNameParams) Type:methodReturnType IDENT:methodName LPAREN FormPars RPAREN
                 ;


FormPars ::= (FormParsDecl) Type IDENT:parName SquareOption ReptPars
            |
            (FormParsDeclError)error:e
            {: parser.report_error("Greska pri deklaraciji formalnog parametra funkcije. Izvrsen oporavak u liniji " + eleft , null); :}
            ;

ReptPars ::= (ReptParsDeclMore) ReptPars COMMA Type IDENT:parName SquareOption
            |
            (ReptParsDeclError)error:e
            {: parser.report_error("Greska pri deklaraciji formalnog parametra funkcije. Izvrsen oporavak u liniji " + eleft , null); :}
            |
            (ReptParsDeclNoMore)//epsilon
            ;

Type ::= (TypeDeclNoPrefix) IDENT:typeName
         |
         (TypeDeclPrefix) IDENT:parentTypeName DOTS DOTS IDENT:typeName
         |
         (TypeDeclVoid) VOID;

StatementList ::= (StatementListDeclMore) StatementList Statement
                  |
                  (StatementListDeclNoMore)//epsilon
                  ;

Statement ::= (StatementDesignator) DesignatorStatement SEMI
            |
            (StatementIf) IF LPAREN IfCondition IfStart Statement OptElse
            |
            (StatementBreak) BREAK SEMI
            |
            (StatementContinue) CONTINUE SEMI
            |
            (StatementReturnNoExpr) RETURN SEMI
            |
            (StatementReturnExpr) RETURN Expr SEMI
            |
            (StatementRead) READ LPAREN Designator RPAREN SEMI
            |
            (StatementPrint) PRINT LPAREN Expr PrintOption RPAREN SEMI
            |
            (StatementFor) FOR LPAREN ForOption1 SEMI CondFactOption CondEnd ForOption2 RPAREN ForStatement
            |
            (StatementNew) LBRACE StatementList RBRACE
            ;

PrintOption ::= (PrintOptionDeclMore) COMMA NUMBER
                |
                (PrintOptionDeclNoMore)//epsilon
                ;

IfCondition ::= (IfCond) Condition
				|
				(IfCondError) error:e
				{: parser.report_error("Greska u logickom iskazu IF konstrukcije. Izvrsen oporavak u liniji " + eleft , null); :}
				;

OptElse ::= (ElseStmt) ElseStart Statement ElseEnd
			|
			(NoElseStmt) /* epsilon */
			;

IfStart ::= (IfStart) RPAREN;

ElseStart ::= (ElseStart) ELSE;

ElseEnd ::= (ElseEnd) /* espsilon */;

CondFactOption ::= (CondFactOptionDeclMore) CondFact
                    |
                    (CondFactOptionDeclNoMore)//epsilon
                    ;

ForOption1 ::= (ForOptionDecl1) DesignatorStatement DesignatorStatementList
              |
              (ForOptionDeclNone1)//epsilon
              ;

ForOption2 ::= (ForOptionDecl2) DesignatorStatement DesignatorStatementList
              |
              (ForOptionDeclNone2)//epsilon
              ;

CondEnd ::= (CondEndDecl) SEMI;

ForStatement ::= (ForStatementDecl) Statement;

DesignatorStatementList ::= (DesignatorStatementListDeclMore) DesignatorStatementList COMMA DesignatorStatement
                            |
                            (DesignatorStatementListDeclNoMore)//epsilon
                            ;

DesignatorStatement ::= (DesignatorStatementAssign) Designator Assignop Expr
                        |
                        (DesignatorStatementInc) Designator INC
                        |
                        (DesignatorStatementDec) Designator DEC
                        |
                        (DesignatorStatementActPars) Designator LPAREN ActPars RPAREN
                        |
                        (DesignatorStatementNoParams) Designator LPAREN RPAREN
                        |
                        (DesignatorStatementArray) LSQUARE DesignatorArrayList MUL Designator RSQUARE EQUAL Designator
                        |
                        (DesignatorStatementError) Designator Assignop error:e
                        {: parser.report_error("Greska pri konstrukciji iskaza dodele. Izvrsen oporavak u liniji " + eleft , null); :}
                        ;

DesignatorArrayList ::= (DesignatorArrayListDeclMore) DesignatorArrayList COMMA
                        |
                        (DesignatorArrayListDeclMoreDesignator) DesignatorArrayList Designator COMMA
                        |
                        (DesignatorArrayListDeclNoMore)//epsilon
                        ;

ActPars ::= (ActParsOne) Expr MoreActPars;

MoreActPars ::= (MoreActParsDeclMore) MoreActPars COMMA Expr
                |
                (MoreActParsDeclNoMore)//epsilon
                ;

//----------------------------------------------USLOVI-------------------------------------------------------------
Condition ::= (ConditionDeclMore) Condition OR CondTerm
            |
            (ConditionDeclNoMore) CondTerm
            ;

CondTerm ::= (CondTermDeclMore) CondTerm AND CondFact
            |
            (CondTermDeclNoMore) CondFact
            ;

CondFact ::= (CondFactExprOnly) Expr
            |
            (CondFactExprRelopExpr) Expr Relop Expr
            ;

//---------------------------------------------------Izrazi-------------------------------------------------------
Expr ::= (ExprDecl) MinusOption Term InsertMinus OptionAddop;


OptionAddop ::= (OptionAddopDeclMore)OptionAddop Addop Term
                |
                (OptionAddopDeclNoMore)//epsilon
                ;

MinusOption ::= (MinusOptionDecl) SUB
                |
                (MinusOptionDeclNoMore)//epsilon
                ;

InsertMinus ::= (InsertMinusDecl)//epsilon
                ;

Term ::= (Term) Factor MoreFactors;

MoreFactors ::= (MoreFactorsDeclMore) MoreFactors Mulop Factor
                |
                (MoreFactorsDeclNoMore)//epsilon
                ;

Factor ::= (FactorDesignator) Designator
          |
          (FactorDesignatorHash) HASH Designator
          |
          (FactorDesignatorMax)  Designator MAX NUMBER
          |
          (FactorDesignatorNoParams) Designator LPAREN RPAREN
          |
          (FactorDesignatorParams) Designator LPAREN ActPars RPAREN
          |
          (FactorNumber) NUMBER
          |
          (FactorChar) CHAR//GRESKA OVDE, MORA DA SE UBACI CHAR
          |
          (FactorBool) BOOL
          |
          (FactorNewExpr) NEW Type LSQUARE Expr RSQUARE
          |
          (FactorNewActParams) NEW Type LPAREN ActPars RPAREN
          |
          (FactorNewNoParams) NEW Type LPAREN RPAREN
          |
          (FactorExpr) LPAREN Expr RPAREN
          ;

//--------------------------------------------Designatori------------------------------------------------------------
Designator ::=(DesignatorDeclNoPrefix) IDENT:name IdentExprOptionList
              |
              (DesignatorDeclPrefix) IDENT:outerName DOTS DOTS IDENT:name IdentExprOptionList;

IdentExprOptionList ::= (IdentExprOptionDeclMore) IdentExprOptionList IdentExprOption
                    |
                    (IdentExprOptionDeclNoMore)//epsilon
                    ;

IdentExprOption ::= (IdentExprOptionIdent) DOT IDENT
                    |
                    (IdentExprOptionIdentError) DOT error:e
                    {: parser.report_error("Greska pri pozivanju polja klase. Izvrsen oporavak u liniji " + eleft , null); :}
                    |
                    (IdentExprOptionExpr) FieldArray Expr RSQUARE
                    ;

FieldArray ::= (FieldArrayDecl) LSQUARE;

//--------------------------------------------Tipovi------------------------------------------------------------
Label ::= (LabelDecl) IDENT;

Assignop ::= (AssignopDecl) EQUAL;

Relop ::= (RelopEqual) EQUALEQUAL
        |
        (RelopNotEqual) NOTEQUAL
        |
        (RelopGreater) GREATER
        |
        (RelopGreaterEqual) GREATEREQUAL
        |
        (RelopLess) LESS
        |
        (RelopLessEqual) LESSEQUAL
        ;

Addop ::= (AddopPlus) PLUS
        |
        (AddopMinus) SUB
        ;

Mulop ::= (MulopMul) MUL
        |
        (MulopDiv) DIV
        |
        (MulopMod) MOD
        ;






































